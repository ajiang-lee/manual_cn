extends ../../layout
block content
    .container
        input#anchor(type='hidden' value='#{section}')
        ol.breadcrumb
            li
                a(href='/mongoDB') MongoDB
            li
                a(href='/mongoDB/model') 数据模型
            li.active 简介
        h3 4.1&emsp;简介
        p 在MongoDB中，数据结构是非常灵活的。不像SQL数据库，插入数据之前必须定义表结构，MongoDB的集合并不会强制文档的结构。
            | 这种灵活性有助于文档到对象实体的映射。集合中的每个文档可以拥有自己特有的结构，。但是在实际使用过程中，
            | 一个集合中的文档结构基本上是相似的。
        p 在对数据模型建模时，关键点是在应用程序的需求、数据引擎的高效、数据读写模式三者之间找到平衡点。在设计数据模型时，
            | 需要同时考虑数据本身的固有结构和应用程序是如何使用数据的（即：读取、更新、数据处理）。
        p 本节内容主要包含以下内容：
        ul
            li
                a(href='#section411') 4.1.1&emsp;文档结构
            li
                a(href='#section412') 4.1.2&emsp;写操作的原子性
            li
                a(href='#section413') 4.1.3&emsp;文档大小的增长
            li
                a(href='#section414') 4.1.4&emsp;数据的使用情况和性能
        h4#section411 4.1.1&emsp;文档结构
        p 在一个使用MongoDB数据库的应用程序中，设计数据模型的关键点有两点：1：文档的结构；2：如何标识文档之间的关系。在MongoDB中，
            | 有两种方式标识文档之间的关系：关联和嵌套文档。
        strong 关联
        p 关联通过在一个文档中保存到另一个文档的关联关系来实现文档之间的关联关系。应用程序可以通过文档中存储的关联关系来获取关联的文档。
            | 通常来讲，这种模式时遵循数据库设计范式的，在关系数据库中这种关联关系的设定非常常见。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_04/4.1.png')
            br
            small 图4.1：通过关联在文档之间建立关系。文档<code>contact、access</code>中均持有到文档<code>user</code>的关联
        strong 嵌套文档
        p 嵌套文档通过在单个文档中保存关联文档来体现文档之间的关联关系。在MongoDB中，可以轻松的在一个文档的字段中定义嵌套文档。
            | 这些不符合范式的数据模型（针对关系型数据库而言）允许应用程序通过单个操作获取关联关系的双方，简化了数据库操作。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_04/4.2.png')
            br
            small 图4.2：使用嵌套文档标识关联关系
        h4#section412 4.1.2&emsp;写操作的原子性
        p 在MongoDB中，只有<em>单个文档</em>的写操作是原子性的，除此之外，没有哪个写操作可以原子性的影响多个文档或多个集合。
            | 嵌套文档将关联关系保存在单个文档中，该特性允许单个操作原子性的更改文档。符合范式要求的关联关系，
            | 由于将关联关系的双方数据存储在不同的集合文档中，导致在MongoDB中，不能原子性的操作关联关系的双方。
        p 但是，在实际使用过程中，如果模型满足原子性操作要求，可能会限制应用程序使用数据的方法，或者限制应用程序的某些操作。
            | 下文有针对此种情况的详细描述，即：如何设计数据模型，才能更好的满足应用程序使用数据和原子性操作的需求。
        h4#section413 4.1.3&emsp;文档大小的增长
        p 一些更新操作，比如向一个数据添加新元素、向文档添加一个新字段，可能会引起文档大小的增加。如果文档大小超过了为该文档分配的空间，
            | 则MongoDB会为该文档重新分配空间。在设计数据模型时，需要考虑文档大小的增长是否会对建模产生影响。
        h4#section414 4.1.4&emsp;数据的使用情况和性能
        p 当设计数据模型时，需要考虑到应用程序是如何使用数据库数据的。例如：如果应用程序只需要使用最近插入的文档，
            | 可以考虑使用<code>Capped Collection</code>;如果应用程序需要频繁的对某个集合进行查询操作，
            | 可以考虑在集合的指定字段上建立索引，以提高查询的性能。