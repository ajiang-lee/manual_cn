extends ../../layout
block content
    .container
        input#anchor(type='hidden' value='#{section}')
        ol.breadcrumb
            li
                a(href='/mongoDB') MongoDB
            li
                a(href='/mongoDB/model') 数据模型
            li.active 参考资料
        h3 4.4&emsp;参考资料
        p 本节内容主要包含以下内容：
            ul
                li
                    a(href='#section441') 4.4.1&emsp;文档
                li
                    a(href='#section442') 4.4.2&emsp;数据库关联关系
                li
                    a(href='#section443') 4.4.3&emsp;GridFS参考
                li
                    a(href='#section444') 4.4.4&emsp;ObjectId
                li
                    a(href='#section445') 4.4.5&emsp;BSON类型
        h4#section441 4.4.1&emsp;文档
        p MongoDB将所有数据存储在文档中，文档是一个与JSON格式类似的数据结构，由键值对组成：
        p
            code {'item': 'pencil', 'qty': 500, 'type': 'no.2'}
        p MongoDB中，用户可以访问的大部分数据结构都是文档，包括：
            ul
                li 所有的数据库记录
                li 查询选择符，用于指定查询语句、更新语句、删除语句的过滤条件
                li 更新定义，用于指定需要更新文档的哪些字段
                li 索引定义，用于指定在哪些字段上建立索引
                li MongoDB的报告、配置输出，比如<code>serverStatus</code>的输出。
        strong 文档格式
        p MongoDB以序列化的<em>BSON</em>格式在磁盘上存储文档。BSON是JSON的二进制表示方法，拥有比JSON更丰富的数据类型。
        p <code>mongo</code> JavaScript shell和<code>MongoDB language drivers</code>将BSON转化为对应语言的文档表示方式。
        strong 文档结构
        p MongoDB的文档有键值对组成，拥有以下的结构：
        p
            code {<br/>
            code.two field1: value1,<br/>
            code.two field2: value2,<br/>
            code.two ...<br/>
            code.two fieldN: valueN<br/>
            code }
        p 字段的值可以是BSON的任意数据类型，包括嵌套文档、数组、嵌套文档数组。下例展示了BSON的不同数据类型：
        p
            code var mydoc = {<br/>
            code.two _id: ObjectId("5099803df3f4948bd2f98391"),<br/>
            code.two name: { first: "Alan", last: "Turing" },<br/>
            code.two birth: new Date('Jun 23, 1912'),<br/>
            code.two death: new Date('Jun 07, 1954'),<br/>
            code.two contribs: [ "Turing machine", "Turing test", "Turingery" ],<br/>
            code.two views : NumberLong(1250000)<br/>
            code }
            p 上例文档中的各个字段的数据类型如下：
                ul
                    li <code>_id</code>为ObjectId
                    li <code>name</code>为嵌套文档
                    li <code>birth、death</code>为日期类型
                    li <code>contribs</code>为数组
                    li <code>views</code>为NumberLong
        strong 字段名称
        p 字段名称必须是字符串。
        p 文档的字段名存在以下限制：
            ul
                li <code>_id</code>字段是保留字段，作为文档的主键使用。字段值在集合中是唯一的，并且是不可改变的，可以是除数组之外的任意数据类型。
                li 字段名不能以<code>$</code>符号开始
                li 字段名不能包含<code>.</code>符号
                li 字段名不能包含<code>null</code>字符
        p BSON文档的字段名可以重复。但是，大多数的驱动程序使用哈希表表示文档，导致文档的字段名不能重复。如果确实需要使用重复的字段名，
            | 请参考具体的驱动程序的说明文档。
        p 一些由MongoDB内置进程创建的文档可能包含重复字段，但是对于已存在的用户创建的文档，不会存在该情况。
        strong 字段值的限制
        p 对于存在索引的集合，索引字段存在一个<code>Maxinum Index Key Length</code>的限制。
        strong 文档的限制
        p 文档拥有以下特性：
        p
            strong
                small 文档大小的限制
        p BSON文档的最大大小为16M。
        p 最大文档大小确保单个文档不会使用超过16M的内容，在传输过程中，不会超过带宽。如果需要存储超过16M的文档，可以使用MongoDB提供的GridFS API。
        p
            strong
                small 文档字段的顺序
        p MongoDB会保存字段写入的顺序，除了以下例外：
            ul
                li 字段<code>_id</code>永远是文档的第一个字段
                li 包含<code>renaming</code>选项的更新可能会导致文档字段的重新排序
        p 版本2.6发生改变：从版本2.6开始，MongoDB会积极的保持字段顺序，在版本2.6之前则不会。
        strong <code>_id</code>字段
        p 字段<code>_id</code>拥有如下特性和限制：
            ul
                li 默认情况下，在创建一个集合时，MongoDB默认为<code>_id</code>字段创建一个唯一索引
                li <code>_id</code>字段永远是文档的第一个字段。如果服务器接收到一个文档，该文档的<code>_id</code>字段不是第一个字段，
                    | 则服务器会将<code>_id</code>字段移动到文档的第一个字段。
                li <code>_id</code>字段可以包含除数组外的任意BSON数据类型
                    .alert.alert-danger 为了确保能够使用复制特性，不要为<code>_id</code>字段指定正则表达式的数据类型。
        p 可以为<code>_id</code>字段指定如下的值：
            ul
                li 使用ObjectId
                li 如果可能使用一个自然唯一标识符，这样可以节省存储空间，也可以避免一个唯一索引的使用
                li 创建一个自增序列
                li 在应用程序中生成一个UUID。为了在集合中以及索引中更高效的存储UUID，请以BSON的BinData数据类型存储UUID
                    p 如果满足以下条件，BinData类型的索引字段的存储效率更高：
                        ul
                            li the binary subtype value is in the range of 0-7 or 128-135, and
                            li the length of the byte array is: 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, or 32
                li 使用驱动程序提供的工具生成UUID。具体使用方法请参考具体的说明文档。
        .alert.alert-danger 大部分驱动程序会自动为不包含<code>_id</code>字段的文档生成<code>_id</code>字段，并为该字段生成一个唯一的ObjectId。
            | 如果驱动程序没有生成<code>_id</code>字段，<code>mongod</code>实例会自动添加<code>_id</code>字段，并生成唯一的ObjectId。
        strong 点符号（.）
        p MongoDB使用点符号访问数组元素和嵌套文档的字段。
        p 获取数组元素（下标从0开始）时，将数组名、点符号、下标数字三者结合在一起，并使用引号包围，如下：
        p
            code 'arrayName.index'
        p 获取嵌套文档字段时，将嵌套文档名、点符号、嵌套文档字段名三者结合在一起，并使用引号包围，如下：
        p
            code 'subdocument.field'
        h4#section442 4.4.2&emsp;数据库关联关系
        p MongoDB不支持关联查询。在MongoDB中，数据可能是不符合范式的，即：为了避免关联查询，将关联数据存储在单个文档中。
            | 但是，在某些场景中，必须将关联数据分别存储在不同的文档中，甚至是不同的集合、不同的数据库中。
        p 可以使用如下两种方法实现文档的关联关系：
            ul
                li <strong>手工设置关联关系</strong>&emsp;在应用程序中为被关联文档生成<code>_id</code>字段的值，然后将该值保存在关联文档中。
                    | 在应用程序中，可以通过额外的查询获取被关联的文档。该种模式比较简单，并且针对大多数场景都是比较合适的。
                li <strong>DBRefs</strong>&emsp;DBRefs指的是在一个文档中存储关联文档的<code>_id</code>字段、集合名称，
                    | 以及可选的所属数据库名称。通过这些信息，可以很容易的定位到关联数据。
                    p 为了解析DBRefs，应用程序必须发送额外的查询语句来获得关联数据。许多驱动程序提供了辅助方法来生成这个额外的查询语句，
                        | 但是并不会将DBRefs直接解析为文档。
                    p DBRefs为组织、表达文档间的关联关系提供了一种通用方法。即便文档是位于不同的文档、不同的集合、不同的数据库。
        p 除非有充分的理由需要用到DBRefs，否则，优先考虑使用手工设置关联关系
        strong 手工设置关联关系
        p
            strong
                small 背景
        p 手工设置设置关联关系就是在一个文档中存储被关联文档的<code>_id</code>字段，应用程序可以通过该<code>_id</code>字段，
            | 使用额外的查询获取关联文档数据。
        p
            strong
                small 处理过程
        p 考虑下例代码，首先为文档<code>places</code>生成一个ObjectId，为了标识该文档属于文档<code>people</code>，
            | 将该字段作为关联字段存储在文档<code>people</code>的<code>places_id</code>字段。
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                code original_id = ObjectId();<br/><br/>
                code db.places.insert({<br/>
                code.two '_id': original_id,<br/>
                code.two 'name': 'Broadway Center',<br/>
                code.two 'url': 'bc.example.net'<br/>
                code });<br/></br>
                code db.people.insert({<br/>
                code.two 'name': 'Erin',<br/>
                code.two 'places_id': original_id,<br/>
                code.two 'url': 'bc.example.net/Erin'<br/>
                code });
                p 执行上述代码后，如果一个查询获取了集合<code>people</code>中的文档，如果需要获取关联的地址信息，
                    | 需要使用文档中的<code>places_id</code>字段的值通过第二个查询语句从集合<code>places</code>中获取。
        p
            strong
                small 使用
        p 对于所有需要建立关联关系的文档而言，都可以使用手工设置关联关系模式。该方法简单有效，并且应用程序可以按需获取关联数据。
        p 对于手工设置关联关系模式，唯一的限制就是该关系没有记录关联文档所属的集合、所属的数据库。如果某个集合的文档存在到多个集合文档的关联，
            | 则可以考虑使用DBRefs。
        strong DBRefs
        p
            strong
                small 背景
        p DBRefs只是一个标识文档的约定，并不是特定的设置关联关系的模式。DBRefs包含集合名字、文档的_id，甚至是数据库名称。
        p
            strong
                small 格式
        p DBRefs拥有以下字段：
            ul
                li <strong>$ref</strong>&emsp;关联文档所属集合的名字
                li <strong>$id</strong>&emsp;关联文档的<code>_id</code>字段的值
                li <strong>$db</strong>&emsp;可选字段；关联文档所属的数据库名字；有些驱动程序不支持该字段。
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                p DBRefs包含如下结构：
                p
                    code {'$ref': value, '$id': value, '$db': value}
                p 某集合的文档在字段<code>creator</code>存储了一个DBRefs：
                p
                    code {<br/>
                    code.two "_id" : ObjectId("5126bbf64aed4daf9e2ab771"),<br/>
                    code.two // .. application fields<br/>
                    code.two "creator" : {<br/>
                    code.third "$ref" : "creators",<br/>
                    code.third "$id" : ObjectId("5126bc054aed4daf9e2ab772"),<br/>
                    code.third "$db" : "users"<br/>
                    code.two }<br/>
                    code }
                p 上例中的DBRefs指向<code>users</code>数据库中的<code>creators</code>集合中<code>_id</code>字段值为<code>ObjectId("5126bc054aed4daf9e2ab772")</code>的文档。
                .alert.alert-danger DBRefs的字段顺序是很重要的，必须使用上述顺序的DBRefs。
        p
            strong
                small 各语言的支持情况
        p
            ul
                li <strong>C++</strong>&emsp;C++驱动程序不支持DBRefs。
                li <strong>C#</strong>&emsp;C#驱动程序使用<code>MongoDBRef</code>类支持DBRefs，并提供<code>FetchDBRef</code>方法用于获取DBRefs对象。
                li <strong>Java</strong>&emsp;Java使用<code>DBRef</code>类支持DBRefs。
                li <strong>JavaScript</strong>&emsp;<code>mongo</code> shell中的JavaScript接口支持DBRefs。
                li <strong>Perl</strong>&emsp;Perl的驱动程序不支持DBRefs。
                li <strong>PHP</strong>&emsp;PHP驱动程序支持DBRefs，使用类<code>MongoBDRef</code>类，并支持<code>$db</code>选项。
                li <strong>Python</strong>&emsp;Python驱动程序提供了类<code>DBRef</code>和方法<code>dereference</code>支持DBRefs。
                li <strong>Ruby</strong>&emsp;Ruby驱动程序提供了类<code>DBRef</code>和方法<code>deference</code>支持DBRefs。
        p
            strong
                small 使用
        p 在大多数情况下，应该使用<code>手工设置关联关系</code>来设置两个文档或多个文档的关联关系。但是，针对具体的使用情况，
            | 可以考虑使用DBRefs。
        h4#section443 4.4.3&emsp;GridFS参考
        p GridFS将文件存储在两个集合中：
            ul
                li <strong>chunks</strong>&emsp;用于存储二进制块。
                li <strong>files</strong>&emsp;用于存储文件元信息。
        p GridFS将集合集中于一个bucket中。GridFS默认使用<code>fs</code>前缀：
        p
            code fs.files<br/>
            code fs.chunks
        p 可以为bucket指定不同的名称，在一个数据库中可以创建多个bucket。
        strong 集合<code>chunks</code>
        p 集合<code>chunks</code>中的每个文档代表在GridFS中存储文件的一个二进制块。文档具有如下结构：
        p
            code {<br/>
            code.two '_id': ObjectId,<br/>
            code.two 'files_id': ObjectId,<br/>
            code.two 'n': num,<br/>
            code.two 'data': binary<br/>
            code }
        p 文档中各个字段的解释如下：
            ul
                li <strong>_id</strong>&emsp;集合中该二进制块的唯一标识
                li <strong>files_id</strong>&emsp;标识该二进制块所属的文件，即：集合<code>files</code>中文件的<code>_id</code>字段的值
                li <strong>n</strong>&emsp;二进制块的编号。GridFS从下标0开始编号
                li <strong>data</strong>&emsp;块的BSON二进制类型数据
        p 集合<code>chunks</code>在字段<code>files_id、n</code>字段上存在一个唯一复合索引，如果不存在，需要自己手工创建索引。
        strong 集合<code>files</code>
        p 集合<code>files</code>中的每个文档代表GridFS中存储的一个文件。文档具有以下结构：
        p
            code {<br/>
            code.two '_id': ObjectId,<br/>
            code.two 'length': num,<br/>
            code.two 'chunkSize': num,<br/>
            code.two 'uploadDate': timestamp,<br/>
            code.two 'md5': hash,<br/>
            code.two 'filename': string,<br/>
            code.two 'contentType': string,<br/>
            code.two 'aliases': string array,<br/>
            code.two 'metadata': dataObject<br/>
            code }
        p 集合<code>files</code>中的文档可以包含上述的所有或部分字段，应用程序可以根据需要添加自有字段，字段解析如下：
            ul
                li <strong>_id</strong>&emsp;文档的唯一标识。
                li <strong>length</strong>&emsp;文档的大小，以字节为单位。
                li <strong>chunksize</strong>&emsp;每个二进制块的大小。GridFS以该字段的值将文件进行分块，默认大小为255K。
                li <strong>uploadDate</strong>&emsp;文件被保存的时间。
                li <strong>md5</strong>&emsp;命令<code>filemd5</code>返回的MD5校验码。
                li <strong>filename</strong>&emsp;可选字段；文件名称
                li <strong>contentType</strong>&emsp;可选字段；文件的MIME类型
                li <strong>aliases</strong>&emsp;可选字段；文件的别名
                li <strong>metadata</strong>&emsp;可选字段；存储的附加信息
        h4#section444 4.4.4&emsp;ObjectId
        strong 简介
        p <em>ObjectId</em>是一个12字节的BSON数据类型，由以下数据组成：
            ul
                li 4字节的日期数据，从Unix元年开始的秒数
                li 3字节的机器标识符
                li 2字节的进程编号
                li 3字节的计数器，从一个随机数开始
        p 在MongoDB中，集合中的文档需要一个唯一的<code>_id</code>字段作为主键标识。由于ObjectId较小，重复概率极小，并且能够快速的生成，
            | 所以如果文档不包含<code>_id</code>字段则MongoDB默认使用ObjectId作为<code>_id</code>字段的值。
            | MongoDB的客户端应该为文档的<code>_id</code>字段生成唯一的ObjectId值，如果客户端提交的文档不包含<code>_id</code>字段，
            | 则<code>mongod</code>实例会为文档的<code>_id</code>字段生成ObjectId。
        p 字段<code>_id</code>使用ObjectId还有以下优点：
            ul
                li 在<code>mongo</code> shell中，可以通过方法<code>getTimestamp()</code>获得ObjectId的创建时间
                li 字段<code>_id</code>的排序结果基本上等于按照时间顺序排序
                    .alert.alert-danger 按照ObjectId排序和按照创建时间排序的关系是：ObjectId在一秒内的顺序并不严格。
                        | 如果多个系统，或者一个系统的多个进程或线程在同一秒内生成ObjectId，则ObjectId的值并不能准确的反应生成时间。
                        | 客户端的始终偏移也可能导致上述情况，因为ObjectId是由客户端生成，而不是由<code>mongod</code>实例生成。
        strong ObjectId()
        p 在<code>mongo</code> shell中可以通过包装类<code>ObjectId()</code>生成ObjectId，同时提供了如下的属性和方法：
            ul
                li <strong>str</strong>&emsp;返回对象的十六进制字表示的符串
                li <strong>getTimestamp()</strong>&emsp;返回对象的创建时间（Date类型）
                li <strong>toString()</strong>&emsp;返回对象的JavaScript形式的字符串（即：ObjectId(...)）
                li <strong>valueOf()</strong>&emsp;返回对象的十六进制字表示的符串，和<code>str</code>相同
        strong 示例
        p
            strong
                small 生成ObjectId
        p 可以使用不带参数的方法<code>ObjectId()</code>生成ObjectId：
        p
            code var x = ObjectId();
        p 上述语句中x的值为：
        p
            code ObjectId("507f1f77bcf86cd799439011")
        p 如果需要为指定十六进制字符串生成ObjectId，可以将十六进制字符串作为参数传递给ObjectId()：
        p
            code var y = ObjectId("507f191e810c19729de860ea")
        p 上述语句中y的值为：
        p
            code ObjectId("507f191e810c19729de860ea")
        p
            strong
                small 将ObjectId转换为Timestamp
        p 可以使用方法<code>getTimestamp()</code>获得ObjectId的创建时间，如下：
        p
            code ObjectId("507f191e810c19729de860ea").getTimestamp()
        p 上述方法的返回结果为：
        p
            code ISODate("2012-10-17T20:46:22Z")
        p
            strong
                small 将ObjectId转化为字符串
        p 可以使用ObjectId的<code>str</code>属性、<code>valueOf()、toString()</code>方法获取ObjectId的字符串表示。
        p
            strong
                small 实际测试代码
        p.text-center
            img(src='/images/mongoDB/chapter_04/local_001.png')
        h4#section445 4.4.5&emsp;BSON类型
        p BSON是一个二进制序列化格式，在MongoDB中用于存储文档数据，并且可以用于远程过程调用。关于BSON的定义可以参考<a href='http://bsonspec.org' target='_blank'>bsonspec.org</a>。
        p BSON支持以下数据类型。每种数据类型都有一个对应的数字标识，可以在过滤条件中通过<code>$type</code>操作符用于指定字段的数据类型。
            table.table.table-bordered
                thead
                    tr
                        th 类型
                        th 代表数字
                tbody
                    tr
                        td Double
                        td 1
                    tr
                        td String
                        td 2
                    tr
                        td Object
                        td 3
                    tr
                        td Array
                        td 4
                    tr
                        td Binary data
                        td 5
                    tr
                        td Undefined
                        td 6
                    tr
                        td Object id
                        td 7
                    tr
                        td Boolean
                        td 8
                    tr
                        td Date
                        td 9
                    tr
                        td Null
                        td 10
                    tr
                        td Regular Expression
                        td 11
                    tr
                        td JavaScript
                        td 13
                    tr
                        td Symbol
                        td 14
                    tr
                        td JavaScript(with scope)
                        td 15
                    tr
                        td 32-bit integer
                        td 16
                    tr
                        td Timestamp
                        td 17
                    tr
                        td 64-bit integer
                        td 18
                    tr
                        td Min key
                        td 255
                    tr
                        td Max key
                        td 127
        strong 对比和排序
        p 当比较BSON不同数据类型的数据时，MongoDB使用如下的比较顺序（从低到高）：
            ol
                li MinKey(internal type)
                li Null
                li Numbers(ints, longs, doubles)
                li Symbol, String
                li Object
                li Array
                li BinData
                li ObjectId
                li Boolean
                li Data, Timestamp
                li Regular Expression
                li MaxKey(internal type)
        p 处于比较的目的，MongoDB会将一些类型视为相等。比如，数字类型数据在比较前会进行转换。
        p 对于不存在的字段，比较操作时，会将之视为一个空的BSON Object。比如：一个在集合<code>{}、{a: null}</code>的字段<code>a</code>上的排序，
            | 会将上述两个文档视为是相等的。
        p 对于数组，一个小于的比较或者一个升序排序使用数组中最小的元素；一个大于的比较或者一个降序排序使用数组中最大的元素。
            | 因此，当一个包含单个元素的数组（比如：[1]）和一个非数组元素（比如：2）比较时，结果是1和2之间的比较。
            | 当一个空数组（比如：[]）比较时，可以将之视为null或者不存在的元素。
        p MongoDB按照如下的顺序排序<code>BinData</code>：
            ol
                li 首先按照数据的长度或大小
                li 之后按照BSON的子类型one-type
                li 最后，逐字节的对比数据
        strong ObjectId
        p ObjectId是：数据量小、尽可能唯一、能够快速生成、有序的。ObjectId由12字节组成，前4个字节代表该ObjectId创建的时间。
        strong String
        p BSON字符串的编码是UTF-8。通常，各编程语言的驱动程序会在序列化、反序列化BSON字符串时使用UTF-8的编码。
        strong Timestamp
        p BSON提供了一个特殊的timestamp数据类型供MongoDB内部使用，该类型和常规的Date数据类型没有关联。Timestamp类型由64位组成：
            ul
                li 前32位是<code>time_t</code>值（从Unix元年开始的秒数）
                li 后32位是在给定时间内操作的递增的顺序数
        p 在单个<code>mongod</code>实例中，timestamp总是唯一的。
        p 在副本集中，<code>oplog</code>有一个<code>ts</code>字段，该字段的值反应了操作的时间，使用BSON timestamp数据类型。
        .alert.alert-danger BSON Timestamp数据类型是供MongoDB内部使用的。对于应用开发的绝大部分场景，使用BSON Date数据类型。
        p 如果使用空构造函数（即：new Timestamp()）创建一个BSON Timestamp，如果是在文档的第一个字段中使用则MongoDB会生成一个时间戳，
            | 否则，MongoDB会生成一个空的时间戳（即：Timestamp(0, 0)）。
        p 从版本2.1开始，<code>mongo</code> shell中会如下展示Timestamp：
        p
            code Timestamp(time_t, ordinal)
        p 版本2.1之前，<code>mongo</code> shell中会如下展示Timestamp：
        p
            code { t : time_t, i : ordinal }
        strong Date
        p BSON Date是一个64位的整形数字，代表从Unix元年（1970-01-01）开始的毫秒数。该类型可以表示Unix元年前后各290百万年的时间范围。
        p 官方将BSON Date数据类型定义成<code>UTF datetime</code>。
        p 版本2.0开始：BSON Date是有符号的整数。负数代表Unix元年之前的日期。
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                p 在<code>mongo</code> shell中可以使用构造方法<code>new Date()</code>创建一个日期对象：
                p
                    code var mydate1 = new Date();
                p 使用构造方法<code>new ISODate()</code>构建一个日期对象：
                p
                    code var mydate2 = new ISODate();
                p 返回日期对象的字符串标识：
                p
                    code mydate1.toString();
                p 获取日期对象的月份；月份从0开始，即：0代表一月：
                p
                    code mydate1.getMonth();



