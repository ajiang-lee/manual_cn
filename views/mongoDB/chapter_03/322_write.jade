extends ../../layout

block content
    .container
        input#anchor(type='hidden' value='#{section}')
        ol.breadcrumb
            li
                a(href='/mongoDB') MongoDB
            li
                a(href='/mongoDB/crud') CRUD
            li
                a(href='/mongoDB/crud') 相关概念
            li.active 写操作
        h4#section322 3.2.2 读操作
        p 本页内容详细描述了MongoDB数据库的写操作，主要包含以下内容：
        ul
            li
                a(href='#section3221') 3.2.2.1 概述
            li
                a(href='#section3222') 3.2.2.2 写关注（Write Concern）
            li
                a(href='#section3223') 3.2.2.3 分布式写操作
            li
                a(href='#section3224') 3.2.2.4 写操作的性能
            li
                a(href='#section3225') 3.2.2.5 批量插入操作
            li
                a(href='#section3226') 3.2.2.6 底层数据存储
        h4#section3221 3.2.2.1 概述
        p 写操作指的是在MongoDB实例中进行添加、修改数据。在MongoDB中，写操作只能针对单一集合，MongoDB中的所有写操作在单一集合上具有原子性。
        p 在MongoDB中有三种类型的写操作：<code>插入（insert）</code>、<code>更新（update）</code>、<code>删除（remove）</code>。
            | 插入操作向某个集合添加新数据，更新操作更改某个集合已存在的数据，删除操作从某个集合删除数据。
            | 所有上述三种写操作只在单一集合上具有原子性（即：写操作针对多个集合的操作不具有原子性）。
        p 对于更新和删除操作，可以通过过滤条件来限制哪些文档需要更新或者删除。更新和删除语句中指定过滤条件的语法和读操作相同。
        p MongoDB允许应用程序指定写关注的等级，详细介绍参考<a href='#section3222'>写关注（Write Concern）</a>
        strong 插入（Insert）
        p 在MongoDB中，<code>db.collection.insert()</code>方法执行向集合添加数据操作。
        p 如下示例展示了MongoDB插入操作的组成部分：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.13.png')
        p.text-center
            small 图3.13 MongoDB插入操作的组成部分
        p 和上述MongoDB插入操作等价的关系数据库的Insert语句为：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.14.png')
        p.text-center
            small 图3.14 关系数据库Insert SQL语句的组成部分
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                code db.users.insert({name: "sue", age: 26, status: "A"});
                p 上述插入操作向集合<code>users</code>插入一个新文档，该新文档包含4个字段：<code>name</code>、
                    | <code>age</code>、<code>status</code>、<code>_id</code>。如果插入文档不包含<code>_id</code>字段，
                    | 则MongoDB默认添加<code>_id</code>字段。
        p <strong><small>插入操作的行为</small></strong>&emsp;如果插入的文档不包含<code>_id</code>字段，则客户端驱动或者<code>mongod</code>实例隐式为该文档添加一个<code>_id</code>字段，
            | 并且该<code>_id</code>字段是一个唯一的<code>ObjectId</code>类型的值。
        p 如果文档指定了<code>_id</code>字段，则确保该值在集合中的唯一性。对于指定了<em>写关注（Write Concern）</em>的插入操作，
            | 如果插入文档的<code>_id</code>字段的值在该集合中已存在，则<code>mongod</code>实例返回一个重复主键异常。
        p <strong><small>其他添加文档的方法</small></strong>&emsp;除了上述添加文档的方法，可以使用带有<em>upsert</em>选项的方法，
            | 如果<em>upsert</em>选项的值为<code>true</code>，则这些方法将会更新匹配到的文档，或者如果没有匹配到任何文档，则执行一个添加文档操作。
        strong 更新（Update）
        p 在MongoDB中，方法<code>db.collection.update()</code>更新单个集合中的已存在文档。方法<code>db.collection.update()</code>可以指定过滤条件，
            | 用于指定哪些文档需要更新，该方法也可以指定其他选项，用于影响更新操作的行为，例如选项<code>multi</code>用于指定更新多个文档。
        p 如下示例展示了MongoDB更新操作的组成部分：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.15.png')
        p.text-center
            small 图3.15 MongoDB更新操作的组成部分
        p 和上述MongoDB更新操作等价的关系数据库的Update语句为：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.16.png')
        p.text-center
            small 图3.16 关系数据库Update SQL语句的组成部分
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                code db.users.update({age: {$gt: 18}}, {$set: {status: "A"}}, {multi: true});
                p 上述更新语句将集合<code>users</code>中<code>age</code>大于<code>18</code>的所有文档的<code>status</code>字段值更改为<code>A</code>。
        p <strong><small>更新操作的默认行为</small></strong>&emsp;默认情况下，<code>db.collection.update()</code>方法只更新集合中的<strong>单个</strong>文档。
            | 但是，通过添加<code>multi</code>选项，<code>db.collection.update()</code>方法可以更新集合中的多个匹配文档。
        p <code>db.collection.update()</code>方法可以更新已存在文档的指定字段，或者完全替换已存在的文档。
        p 当更新操作导致更新后文档的数据大小超过已分配空间时，MongoDB实例会在磁盘上为该文档重新分配空间。
        p MongoDB会保持写操作时文档字段的顺序，除了以下例外情况：
        ul
            li <code>_id</code>字段总是位于文档的第一个字段。
            li 包含<code>renaming</code>选项的更新操作可能会导致文档字段的重新排序。
        p 从版本2.6开始，MongoDB会积极的保持文档中字段的顺序；在版本2.6之前的版本中，MongoDB不会积极的保存文档中字段的顺序。
        p <strong><small>带有<code>upsert</code>选项的更新操作</small></strong>&emsp;如果<code>db.collection.update()</code>方法带有<code>upsert: true</code>选项：
            | 如果查询操作的过滤条件没有匹配到任何文档，则更新操作添加一个文档到集合中；如果查询操作的过滤条件匹配到文档，
            | 则更新操作更新匹配文档的指定字段。
        p 通过指定<code>upsert: true</code>选项，可以在一个操作实现两个操作：如果匹配到文档，则执行更新操作；如果没有匹配到文旦个，则执行插入操作。
        p 在版本2.6中，通过添加<code>upsert: true</code>选项，新方法<code>Bulk()</code>和<code>update</code>命令可以执行多个操作。
        strong 删除（Remove）
        p 在MongoDB中，方法<code>db.collection.remove()</code>从一个集合中删除文档。<code>db.collection.remove()</code>方法可以通过添加过滤条件指定需要删除哪些文档。
        p 如下示例展示了MongoDB删除操作的组成部分：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.17.png')
        p.text-center
            small 图3.17 MongoDB删除操作的组成部分
        p 和上述MongoDB删除操作等价的关系数据库的Delete语句为：
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.18.png')
        p.text-center
            small 图3.18 关系数据库Delete SQL语句的组成部分
        .panel.panel-default
            .panel-heading 示例
            .panel-body
                code db.users.remove({status: "D"});
                p 上述删除操作将会从<code>users</code>集合中删除所有<code>status</code>字段值为<code>D</code>的文档。
        p <strong><small>删除操作的行为</small></strong>&emsp;默认情况下，<code>db.collection.remove()</code>方法删除匹配的所有文档。
            | 但是，可以通过添加标识来限制只删除一个文档。
        strong 写操作的隔离级别
        p 单个文档的更新操作总是原子性的，即便一个写操作更新了单个文档中的多个子文档。对于需要更新多个文档的写操作，该操作不是原子性的，
            | 其他操作可能交替发生。
        p 除了单个文档的更新操作是原子性的，其他任何写操作都不是原子性的。但是，可以通过使用<code>隔离操作符（isolation operator）</code>将一个影响多个文档的写操作进行隔离。
        p 为了将一系列的写操作同其他读操作、写操作隔离，可以考虑使用<a href="">两阶段提交操作</a>。
        strong 写操作的其他方法
        p <code>db.collection.save()</code>方法可以更新一个已存在的文档，如果根据<code>_id</code>字段没有匹配到文档，则插入一个新文档。
        p MongoDB同样提供了批量写操作的方法<code>Buld()</code>。
        h4#section3222 3.2.2.2 写关注（Write Concern）
        p 写关注指的是当MongoDB报告写操作成功时提供的保证度。写关注的强度决定了保证度的可靠性。当插入、更新、删除操作拥有一个较弱的写关注时，
            | 写操作可以较快的返回。在一些失败情境中，如果写操作的写关注较弱，则可能导致数据并没有完成持久化（即：实例重启后，本来成功返回的写操作并没有真正完成数据的持久化）。
            | 使用较强的写关注，客户端在发送一个写操作后，可能需要等待较长时间（相较于弱的写关注）以确保MongoDB实例成功完成了该操作。
        p MongoDB提供了不同等级的写关注以适应不同应用程序的要求。客户端可以通过调整写关注的等级来确保重要操作针对整个MongoDB部署是成功的（主要指的是MongoDB的副本集）。
            | 对于少数的情况，客户端可以通过调整写关注的等级来确保性能的最优化，而不是确保操作针对整个部署是成功的。
        p 版本2.6新特性：MongoDB使用一种新的协议将写关注和写操作结合在一起。
        strong 注意事项
        p <strong><small>默认写关注等级</small></strong>&emsp;<code>mongo</code> shell和MongoDB的驱动使用<code>Acknowledged</code>作为写关注的默认等级。
        p <strong><small>读操作的隔离</small></strong>&emsp;MongoDB允许客户端读取未提交文档，写关注等级和日志配置不会影响该行为。
            | 结果就是，应用程序可能会表现出两种行为：
        ul
            li 如果存在多个并发的读写操作，MongoDB允许读操作读取写操作并未成功返回的写操作数据。
            li 如果<code>mongod</code>在日志提交前异常终止，即便一个写操作成功返回，读操作可能读取到一些在<code>mongod</code>重启后就不存在的数据。
        p 在其他关系数据库中，这种读操作的隔离被称为<em>读未提交（read uncommitted）</em>。对于所有的插入和更新操作，
            | MongoDB确保针对单个文档的更改是彼此隔离的：客户端永远不可能看到单个文档的中间状态。对于多个文档的操作，
            | MongoDB不提供对应的事务或隔离。
        p 当<code>mongod</code>成功返回一个<em>journaled</em>等级的写关注，代表数据已完全成功写入磁盘，<code>mongod</code>重启后数据仍可用。
        p 对于副本集，一个写操作只有在写入副本集成员并且已提交到副本集的大部分成员的日志后，该写操作才是持久化的。
            | 不管写关注的等级如何，MongoDB都会定期将数据提交到日志中：使用<code>commitIntervalMs</code>参数控制<code>mongod</code>多久提交一次日志。
        p <strong><small>超时</small></strong>&emsp;客户端可以针对<code>replica acknowledged</code>等级的写关注设置一个<code>wtimeout</code>参数。
            | 如果在指定时间内，写关注没有被满足，则该操作返回一个异常，即便最终该写关注会成功返回。
        p 当超时发生后，MongoDB不会回滚或者做取消修改操作。
        strong 写关注等级
        p 在概念上，MongoDB拥有以下等级的写关注，从弱到强依次列出：
        p <strong><small>Unacknowledged</small></strong>&emsp;对于<em>unacknowledged</em>等级的写关注，MongoDB不需要确认写操作的回执。
            | <em>Unacknowledged</em>类似于<em>忽略错误（errors ignored）</em>；但是，驱动程序可能会尝试接受并且处理网络异常，
            | 驱动程序的这种探测网络异常的能力取决于操作系统本身的网络配置。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.19.png')
            br
            small 图3.19 写关注等级为<code>unacknowledged</code>时，针对<code>mongod</code>的写操作，
                | 客户端不需要等待任何回执消息。
        p <strong><small>Acknowledged</small></strong>&emsp;对于<em>acknowledged</em>等级的写关注，
            | <code>mongod</code>实例需要确认写操作的回执消息。该等级的写关注允许客户端捕获网络异常、主键重复等其他异常。
        p 版本2.6新特性：在<code>mongo</code> shell中，MongoDB默认使用<code>acknowledged</code>等级的写关注。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.20.png')
            br
            small 图3.20 写关注等级为<code>acknowledged</code>时，针对<code>mongod</code>的写操作，
                | 客户端需要等待实例的失败或成功回执消息。
        p <strong><small>Journaled</small></strong>&emsp;对于<em>journaled</em>等级的写关注，
            | MongoDB只有在将数据提交到日志以后收到写操作的回执消息。该等级的写关注可以确保MongoDB在断电、异常宕机重启后可以恢复数据。
        p 如果需要使用该等级的写关注，必须启用日志记录（journaling）。
        p 对于<em>journaled</em>等级的写关注，写操作必须等待下一次的日志提交才能返回。为了提高日志提交的频率，可以通过参数<code>commitIntervalMs</code>进行修改。
        .alert.alert-danger 在一个副本集中，如果配置了<code>journaled</code>等级的写关注，则只需要副本集中的主成员（primary）完成日志提交即可。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.21.png')
            br
            small 图3.21 写关注等级为<code>journaled</code>时，针对<code>mongod</code>的写操作，
            | 在提交数据到日志后，<code>mongod</code>实例才返回回执消息。
        p <strong><small>Replica Acknowledged</small></strong>&emsp;对于副本集的写关注需要额外的注意，默认情况下，
            | 只需要确认副本集中主成员返回回执消息即可。
        p 对于<em>replica acknowledged</em>等级的写关注，可以确保写操作已传播到副本集中的其他成员中。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.22.png')
            br
            small 图3.22 对副本集写时，写关注的等级为<code>w:2</code>，或者说，针对主成员并且至少一个二级成员。
        h4#section3223 3.2.2.3 分布式写操作
        strong 分片集群的写操作
        p 对于一个分片集群中的分片集合，<code>mongos</code>将来自应用程序的写操作分发到集群中对应的分片。
            | <code>mongos</code>使用来自<code>config database</code>中存储的集群元信息完成上述分发操作。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.23.png')
            br
            small 图3.23 MongoDB的分片集群
        p MongoDB依据<em>分片键（shard key）</em>的值将一个分片集合的数据分割成不同的区间，之后，MongoDB将这些不同区间的数据分别分发到对应的分片中。
            | 分片键决定了集合如何进行分片，分片键选取的好坏直接影响分片集群中集合的读写性能。
        .alert.alert-danger 影响单个文档的更新操作必须包含<em>分片键</em>或者<em>_id</em>字段。
            | 影响多个文档的更新操作如果包含<em>分片键</em>，在某些情境中可以提高性能，但是更新操作可能被传播到所有分片中。
        p 如果随着插入操作的进行，分片键的值发生增加或者减少，所有的插入操作被分配到单个分片中，此时，该分片成为整个副本集的热点，可能成为性能故障点。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.24.png')
            br
            small 图3.24 分片键的值被分散到多个区间中
        strong 副本集的写操作
        p 在<em>副本集（replica set）</em>中，所有的写操作被定向到集群的主成员（primary）中，主成员在自身实例中完成写操作，
            | 并将该写操作记录到自身实例的操作日志中（oplog）。<code>oplog</code>是一个针对数据集操作记录的可复写序列。
            | 副本集的次成员（secondary）连续复制主成员的<code>oplog</code>，并且将这些<code>oplog</code>应用到自身实例，进而实现数据集的复制。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.25.png')
            br
            small 图3.25 针对副本集的读写操作，默认被定向到主成员
        p 大量的写操作，特别是批量写操作，可能会导致次成员无法高效的将从主成员复制过来的<code>oplog</code>应用到自身实例中，
            | 此时将导致次成员实例的数据状态落后于主成员实例的数据状态。如果一个副本集中次成员实例的数据明显落后于主成员的数据，
            | 可能导致严重问题，如：次成员无法提供一致读功能、故障转移无法正常进行等等。
        p 为了解决上述问题，可以通过配置写操作的<code>写关注（write concern）</code>等级，
            | 来确保每对副本集的其他成员进行100次或1000次写操作必须得到写操作的回执信息，这样可以确保次成员可以赶上主成员的数据状态。
            | 写关注虽然说降低了写操作的速度，但是能够最大程度的使次成员的数据状态赶上主成员的数据状态（即：以时间换取数据一致性）。
        p.text-center
            img.img-responsive(src='/images/mongoDB/chapter_03/3.26.png')
            br
            small 图3.26 针对副本集的写操作拥有<code>w:2</code>等级的写关注（即：写操作必须写入主成员，并且该写操作被至少传播到一个次成员后，该写操作才返回）
        h4#section3224 3.2.2.4 写操作的性能
        strong 索引
        p 每个插入、更新、删除操作之后，MongoDB除了需要更新对应的集合文档数据之外，也需要更新和该集合关联的索引。
            | 所以，索引对于集合的写操作性能增加了额外的操作负担。
        p 通常来说，相较于索引针对写操作增加的负担，索引提供的高性能读操作还是值得的。但是，为了使写操作的性能达到最优，
            | 在创建索引时必须谨慎，确保创建的索引被查询语句使用，否则该索引除了增加写操作负担，对读操作没有任何益处。
        strong 文档大小增长
        p 如果一个更新操作使一个文档的大小超过当前分配的<em>记录大小（record size）</em>，
            | 则MongoDB会在磁盘重新为该文档分配空间以容纳更新后的文档。相较于原地（in-place，即：在已分配的空间中）更新，
            | 重新分配空间耗费更长的时间，如果该集合存在关联索引，则耗时更长。如果一个集合拥有索引，MongoDB必须更新所有索引条目，
            | 因此，对于一个拥有多个索引的集合，重新分配文档空间将会影响写操作的吞吐量（即：降低写操作的性能）。
        p 一些更新操作符，比如<code>$inc</code>，不会引起文档大小的增长。对于这些更新操作符，MongoDB可以进行原地更新。
            | 其他更新操作符，比如<code>$push</code>，会引起文档大小的改变。
        p 相较于需要重新分配空间的更新，原地更新的性能更高。因此，在设计数据存储时，需要考虑文档大小随着时间的推移，是否会发生明显的增加以引起文档空间的重分配。
        strong 数据存储的性能
        p <strong><small>硬件</small></strong>&emsp;硬件存储系统的性能会对MongoDB写操作的性能造成一些物理的硬性限制。
            | 存储器的一些特性可能会影响数据库的写操作性能，比如随机存储类型、磁盘缓存、磁盘预读，以及RAID配置。
        p 相比于普通磁盘，固态硬盘的性能要高得多。
        p <strong><small>日志</small></strong>&emsp;MongoDB使用<em>提前写日志（write ahead loggin）</em>来确保写操作的持久化，
            | 以提供灾难恢复。在将写操作的更改应用到数据文件之前，MongoDB首先将更改写入日志文件。
        p 尽管针对数据库写操作的写日志操作增加了写操作的负担，进而影响到写操作的性能，但需要考虑写日志和性能之间的相互影响：
        ul
            li 如果日志和数据文件位于同一个存储设备上，则写日志和写数据文件两操作之间会产生竞争，导致整体写性能下降。
                | 所以，尽量将日志和数据文件分别置于独立的存储设备中，以提高系统的写操作性能。
            li 如果应用程序指定写关注的等级包含<em>journaled</em>，则MongoDB会降低日志提交的间隔，这样可以增加写操作的性能。
            li 日志提交的间隔可以通过运行时选项<code>commitIntervalMs</code>进行配置。降低提交间隔会增加写操作的数量，
                | 但是会影响MongoDB的写操作性能。提高提交间隔会降低写操作的数量，但是也增加了写操作丢失的风险。
        h4#section3225 3.2.2.5 批量插入操作
        p 有时，需要将一批数据批量插入到MongoDB数据库中，这些<em>批量插入（bulk insert）</em>操作相较于其他数据库写操作有一些需要特别关注的点
        strong 方法<code>insert()</code>
        p 当方法<code>insert()</code>接收一个文档数组时，该方法执行批量插入，并且确保每个插入操作是原子性的。
            | 通过摊销写关注的消耗，批量插入可以明显的提高插入操作的性能。
        p 版本2.2新特性：在版本2.2中，<code>insert()</code>方法支持批量插入。
        p 在驱动程序中，可以为批操作指定写关注等级，而不是为每一个文档插入操作指定写关注等级。
        p 在驱动程序的插入操作中，有一个<code>ContinueOnError</code>选项，即便批量操作中某个插入操作失败了，仍然可以继续执行其他剩余插入操作。
        .alert.alert-danger 在批量插入中，如果产生多个操作，客户端只会收到最后一个错误。
        strong 分片集群的批量插入
        p 在非分片集群中，<code>ContinueOnError</code>选项是可选的，但是在分片集群中，<em>分片集合</em>的批量操作该选项不能被禁用。
        p 大批量数据的插入操作，包括初始数据插入以及后续数据导入，会影响分片集群的性能。所以，对于分片集群的批量插入，考虑以下策略：
        ul
            li <strong><small>预分片</small></strong>&emsp;如果分片集合为空，集合只有一个初始<em>chunk</em>，并且该<em>chunk</em>位于单个分片。
                | 当批量插入一个分片集合时，MongoDB必须花费时间收集数据、分片数据、分发数据到不同的分片中，为了避免上述过程中的时间消耗，
                | 可以预先将集合进行分片。
            li <strong><small>使用多个<code>mongos</code></small></strong>&emsp;为了使导入操作并行进行，可以将批量操作分发到到多个<code>mongos</code>实例。
            li <strong><small>避免分片键的集中</small></strong>&emsp;如果分片集合的分片键非常集中，则导致所有的插入数据集中到集合的最后一个chunk中，
                | 通常对应单个分片。因此，集群的性能受该单一分片的影响。
                p 如果插入的数据量一个分片无法容纳，或者不能避免分片键的集中，可以考虑以下操作：
                ul
                    li 反转分片键的二进制数据。
                    li 交换头部和尾部的16个字节的数据。
        h4#section3226 3.2.2.6 底层数据存储
        strong 数据模型
        p MongoDB以<em>BSON</em>的形式存储数据，BSON是一个键值映射的数据结构。BSON支持丰富的数据类型，BSON中的键可以保存数组，以及嵌套文档。
            | MongoDB中的所有文档必须小于16M，这是BSON数据结构的限制。
        p MongoDB中的所有文档均各自保存在一个<em>记录（reocrd）</em>中，该记录保存了文档本身以及一些额外的剩余空间（padding）。
            | 剩余空间主要用于更新操作使用（避免由于更新操作引起的空间重新分配）。
        p MongoDB中的所有记录在磁盘上都是连续的，当更新一个文档导致该文档的大小超过预分配大小时，MongoDB必须为该文档重新分配一个记录。
            | 重分配会导致MongoDB移动对用的文档，以及该文档关联的索引，相较于原地更新，需要重新分配空间的更新操作耗费更多时间。
        p 所有的记录都是集合的一部分，在MongoDB中，集合是文档的逻辑分组，相当于关系数据库中的表。
            | 通常来讲，一个集合中的文档共享一组索引，并且集合中的文档用于相同的字段以及文档结构（不是必须的）。
        p 在MongoDB中，数据库由一组相关集合组成。每个数据库拥有各自的数据文件，包含大量的集合。并且，每个数据库各自拥有一个写锁，
            | 写锁主要用于在数据库的写操作中阻塞其他竞争操作。通常来讲，一个MongoDB实例可以拥有多个数据库。
        strong 日志
        p 为了确保所有针对MongoDB数据库数据集的更改都能永久保存到磁盘中，MongoDB在将更改写入磁盘数据文件之前，首先将更改操作写入日志文件，
            | 相比于写数据文件，写日志文件操作要频繁的多。当<code>mongod</code>示例异常退出时，此时并没有将所有更改操作刷新到数据文件中，
            | 利用日志文件，<code>mongod</code>示例可以恢复日志文件中的数据，以确保数据的完整性。
        strong 记录（record）的空间分配策略
        p MongoDB支持多种记录空间分配策略，记录空间分配策略决定了当<code>mongod</code>创建一个记录时，需要给该记录分配多少剩余空间。
            | 在MongoDB中，一个文档记录被插入数据库后，由于更新操作可能引起文档记录的大小发生改变，并且所有的文档记录在磁盘上是连续分配的，
            | 所以，<code>mongod</code>预分配的剩余空间可以避免由于更新操作引起的记录空间重新分配操作。相较于原地更新，引起空间重分配的更新操作是低效的，
            | 并且空间重新分配可能引起磁盘碎片。所以，预分配剩余空间的策略能够提高更新操作的效率，并且降低磁盘碎片产生的几率。
        p MongoDB提供不同的空间分配策略是为了适应不同的应用场景：<code>2倍空间分配</code>适合insert/update/delete频繁的场景；
            | <code>精确空间分配</code>适合没有update/delete的场景。
        p <strong><small>2倍空间分配</small></strong>&emsp;从版本2.6开始，对于所有的集合，<code>usePowerOf2Sizes</code>成为默认的空间分配策略。
            | 可以使用参数<code>newCollectionUsePowerOf2Sizes</code>改变默认的空间分配策略。
        p <code>mongod</code>使用<code>usePowerOf2Sizes</code>的空间分配策略时，为每个文档记录分配的空间大小为2的倍数（即：32,64,128,256,512...16777216），
            | 并且分配的最小空间为32字节。2倍空间分配策略有以下2个关键点：
        ul
            li 针对空间分配存在一些限制条件，这样可使<code>mongod</code>最大限度的复用已分配空间，进而可以减少磁盘碎片的产生。
            li 在很多情况下，分配的记录空间大小明显比文档的实际大小要大。该分配策略可以尽量避免随着文档的增大<code>mongod</code>为文档重新分配空间。
        p <code>2倍空间分配</code>并不能根除由于文档空间增加引起的空间重分配，但是该策略最大限度的避免了空间重分配产生的机会。
        p <strong><small>精确空间分配</small></strong>&emsp;精确空间分配策略依据文档的大小和额外的剩余空间因子来决定需要分配的记录空间大小。
            | 每个集合都有自己的剩余空间因子，当首次插入文档到集合中时，该因子为1。在一个集合的生命周期中，MongoDB会根据文档大小的增长速度来动态调整剩余空间因子，
            | 该因子最大可以为2.
        p 可以使用公式<code>记录空间大小 = 剩余空间因子 * 文档大小（record size = paddingFactor * document size）</code>来计算记录的空间大小。
        p 一个集合中各个记录的大小反映了当<code>mongod</code>实例为记录分配空间时指定的剩余空间因子的大小。
            | 可以通过查看<code>db.collection.stats()</code>方法输出中的<code>paddingFactor</code>字段来查看一个集合的当前剩余空间因子的大小。
        p 通常来讲，精确空间分配策略比2倍空间分配策略消耗的空间更少，但是如果文档大小增加导致空间重新分配，精确空间分配策略会导致较多的磁盘碎片。
        p <code>compact</code>、<code>repairDatabase</code>操作默认移除剩余空间；<code>mongodump</code>、<code>mongorestore.compact</code>
            | 操作允许手工指定记录的剩余空间。
        strong Capped集合
        p <em>capped集合</em>是一个固定大小的集合，该集合会保持文档的插入顺序。Capped集合的工作机制和循环缓冲区类似：一旦集合的已分配空间被消耗完，
            | 此时插入新文档时，新文档会覆盖最先插入的文档空间。





