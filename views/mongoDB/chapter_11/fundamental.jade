extends ../../layout

block content
    .container
        input#anchor(type='hidden' value='#{section}')
        ol.breadcrumb
            li
                a(href='/mongoDB') MongoDB
            li
                a(href='/mongoDB/question') 常见问题
            li.active 基础相关
        h3 11.1&emsp;基础相关
        p 本节内容详述了有关MongoDB以及在使用MongoDB过程中遇到的基础性问题。主要包含以下内容：
        ul
            li
                a(href='#section1111') 11.1.1&emsp;MongoDB是什么类型的数据库
            li
                a(href='#section1112') 11.1.2&emsp;MongoDB数据库中是否存在表结构
            li
                a(href='#section1113') 11.1.3&emsp;MongoDB数据库中是否存在模式的概念
            li
                a(href='#section1114') 11.1.4&emsp;在编程语言中如何使用MongoDB
            li
                a(href='#section1115') 11.1.5&emsp;MongoDB数据库是否支持SQL语言
            li
                a(href='#section1116') 11.1.6&emsp;MongoDB数据库的使用场景是什么
            li
                a(href='#section1117') 11.1.7&emsp;MongoDB数据库是否支持ACID的事务性操作
            li
                a(href='#section1118') 11.1.8&emsp;MongoDB数据库是否需要较多的内存
            li
                a(href='#section1119') 11.1.9&emsp;应该如何配置缓存大小
            li
                a(href='#section11110') 11.1.10&emsp;应用程序使用MongoDB时，是否需要配置独立的缓存
            li
                a(href='#section11111') 11.1.11&emsp;MongoDB数据库是否拥有缓存
            li
                a(href='#section11112') 11.1.12&emsp;MongoDB数据库中的写操作是立即写入磁盘，还是延时写入
            li
                a(href='#section11113') 11.1.13&emsp;MongoDB数据库使用何种编程语言编写
            li
                a(href='#section11114') 11.1.14&emsp;MongoDB数据库的32位版本存在哪些限制
        h4#section1111 11.1.1&emsp;MongoDB是什么类型的数据库
        p MongoDB是一个基于文档类型的DBMS（数据库管理系统）。可以将之想象为拥有类似JSON对象数据模型的MySQL数据库，MySQL数据库本身的数据模型为关系表。
            | 所以，MongoDB不支持关联查询操作和事务。但是，MongoDB数据库本身具有很多特性：二级成员的索引、丰富的查询语言、单个文档的原子性操作，
            | 以及完全的一致性读。
        p 另外，MongoDB的master-slave模式的复制操作允许自动失败转移，并且，通过分片集群功能实现水平扩展能力。
        .alert.alert-info MongoDB使用BSON格式存储数据，和JSON格式相似，但是更具有表现力。
        h4#section1112 11.1.2&emsp;MongoDB数据库中是否存在表结构
        p 在关系数据库中，数据存储在表结构中，在MongoDB中，数据存储在集合（collection）中；一个集合包含一个或多个文档（document），
            | 对应于关系数据库中的一个表结构中包含一行或多行数据；MongoDB中每个集合文档包含一个或多个字段，对应于关系数据库中每个表结构的每行包含多列。
            | 即：对比与关系数据库，可以将MongoDB中的集合对应于关系数据库中的表，MongoDB的文档对应于关系数据库中的行，MongoDB的文档字段对应于关系数据库中的列。
        p 相比于关系数据库中的表结构，MongoDB的集合存在很大的区别。单个集合中的文档可以拥有唯一的字段组合，不必必须拥有相同的字段。
            | 可以为集合中的某个文档添加一个字段，而不会集合中的其他文档添加字段。即：集合中的文档拥有的字段必须相同，每个文档都可以拥有自己独有的字段。
        h4#section1113 11.1.3&emsp;MongoDB数据库中是否存在模式的概念
        p MongoDB使用动态模式。创建集合时不需要定义集合的结构，即：定义集合时，不必定义集合中字段的名称和字段值的类型。
            | 并且，可以随意的为集合中的文档添加字段或删除字段；集合中的文档不必必须拥有相同的字段。
        p 在实际使用过程中，一个集合中的文档通常具有相同（或接近相同）的字段，但是不是必须的。MongoDB灵活的模式使模式的迁移和改变非常容易。
            | 在实际使用过程中，几乎不可能用到关系数据库中的更新表操作，这种灵活的模式使得MongoDB能够轻易的适应应用程序的需求。
        h4#section1114 11.1.4&emsp;在编程语言中如何使用MongoDB
        p 对于目前各种流行的编程语言，MongoDB均存在相应的客户端驱动程序。请到MongoDB的官网查看相关的驱动程序列表。
        h4#section1115 11.1.5&emsp;MongoDB数据库是否支持SQL语言
        p MongoDB不支持SQL。
        p 但是，MongoDB提供了自身的查询语言。
        h4#section1116 11.1.6&emsp;MongoDB数据库的使用场景是什么
        p MongoDB的设计目的是通用性，能够适应大多数的应用场景。包括内容管理系统、移动互联网应用、游戏开发、电子商务类应用、数据分析、归档存储、
            | 日志记录等等。
        p 对于需要使用SQL、关联查询、事务性很强的应用，不适合使用MongoDB。
        h4#section1117 11.1.7&emsp;MongoDB数据库是否支持ACID的事务性操作
        p MongoDB不支持多文档的事务性操作。
        p 但是，MongoDB在单个文档上的操作是原子性的。通常来讲，如果数据模型规划合理，文档级的原子性操作能够高效的解决相关的业务处理。
        p 例如，在MongoDB中，可以将关联数据存储在文档的嵌套文档或嵌套数组中，依靠文档级的原子性操作可以完成整个文档的更新操作。
            | 在关系数据库中，关联数据通常位于多个表中，如果需要更新多张表，则需要提供事务性支持。
        p MongoDB允许客户端读取到未提交到磁盘的插入和更新操作，无论数据库的写关注等级和日志配置如何。这种行为导致的结果为，
            | 应用程序可能观察到两种行为：
            ul
                li 对于存在多个并发的读和写操作的系统，MongoDB允许客户端读取到未返回写操作的结果。
                li 如果<code>mongod</code>实例在日志提交前异常终止，即便一个写操作已经成功返回，数据在<code>mongod</code>实例重启后会丢失，
                    | 即：一个查询语句在<code>mongod</code>实例异常终止前读取到的数据在<code>mongod</code>实例重启后无法再次读取到。
        p 在其他数据库中，将上述的隔离级别定义为：<code>读未提交</code>。对于所有的插入和更新操作，MongoDB针对每个文档的修改是彼此隔离的：
            | 客户端永远不可能读取到文档的中间状态。对于多文档操作，MongoDB不提供事务性支持和隔离操作。
        p 当<code>mongod</code>成功返回<code>journaled write concern</code>，标志着数据已经成功写入磁盘，
            | 即便<code>mongod</code>实例重启数据仍然可用。
        p 对于副本集，只有在写操作被成功复制，并且被提交到副本集中的一级成员日志中，此时该写操作才是持久性的。MongoDB定期将数据提交到日志，
            | 而不管写关注等级如何：使用参数<code>commitIntervalMs</code>控制<code>mongod</code>实例提交日志的频繁程度。
        h4#section1118 11.1.8&emsp;MongoDB数据库是否需要较多的内存
        p 不需要。完全可以在一个可用内存很少的机器上运行MongoDB。
        p MongoDB自动使用机器所有的可用内存作为自己的缓存使用。虽然系统资源监视器显式MongoDB使用了大量的内存，但是MongoDB的内存使用量是动态的。
            | 如果其他进程突然需要使用机器一半的内存，MongoDB会将占用的缓存内存让出给该进程。
        p 从技术上来讲，操作系统的虚拟内存管理系统管理着MongoDB的内存，这意味着MongoDB会尽量多的使用空闲内存，如果需要可以将数据交换到磁盘。
            | 部署MongoDB时，应该尽量使机器的内存满足应用程序的工作区间数据的需要，这样可以降低因为缺少内存引起的性能下降。
        h4#section1119 11.1.9&emsp;应该如何配置缓存大小
        p MongoDB没有可配置的缓存。MongoDB通过内存文件映射的方式会自动尽可能多的占用系统的可用内存。操作系统使用同样的方式处理操作系统的文件系统缓存。
        h4#section11110 11.1.10&emsp;应用程序使用MongoDB时，是否需要配置独立的缓存
        p 不需要。在MongoDB中，一个文档的表现形式和在应用程序内存中的表现形式非常相近，意味着数据库已经以应用程序使用数据的形式存储数据，
            | 确保数据的存储形式在数据库中和应用程序缓存中都是可用的。这就避免了应用程序配置额外的缓存层。
        p 不同于关系数据库，缓存数据的代价非常昂贵。关系数据库必须将数据转换成应用程序可读的对象形式，然后存储在额外的缓存中供应用程序使用。
            | 如果转换过程中需要关联操作，则转换过程的复杂度将会增加，此时更能体现出缓存层的重要性。
        h4#section11111 11.1.11&emsp;MongoDB数据库是否拥有缓存
        p 是的。MongoDB将最近使用的数据保持在内存中。如果为查询创建了相关索引，并且内存容量可以容纳工作数据集，则MongoDB的所有查询都是在内存中进行。
        p MongoDB没有实现查询缓存：MongoDB执行查询语句时，直接从索引和（或）数据文件中获取。
        h4#section11112 11.1.12&emsp;MongoDB数据库中的写操作是立即写入磁盘，还是延时写入
        p MongoDB默认每隔100毫秒将写操作的结果写入日志文件，一旦写入日志文件，该写操作就是持久化的，即便发生了数据库崩溃，数据也可以完全恢复。
        p 虽然日志提交操作几乎是瞬间发生的，但是MongoDB写数据文件是延迟写的。MongoDB默认可能会等待最多1分钟的时间将数据写入数据文件。
            | 但是这并不会影响数据的持久化，因为日志文件有足够多的信息完成数据的恢复。如果需要改变写数据文件的时间间隔，参考参数<code>syncPeriodSecs</code>。
        h4#section11113 11.1.13&emsp;MongoDB数据库使用何种编程语言编写
        p MongoDB使用C++语言实现。驱动程序和客户端库使用特定语言编写，有些驱动程序为了提高性能使用C扩展实现。
        h4#section11114 11.1.14&emsp;MongoDB数据库的32位版本存在哪些限制
        p MongoDB使用内存映射文件完成数据文件的映射。当MongoDB在32位系统运行时，总的存储空间（包括数据本身和索引）大小为2G。、
            | 由于上述原因的存在，生产环境中不要将MongoDB部署在32位机器上。



